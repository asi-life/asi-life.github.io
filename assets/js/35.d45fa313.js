(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{527:function(e,v,_){"use strict";_.r(v);var t=_(4),a=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"thread-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#thread-介绍"}},[e._v("#")]),e._v(" Thread 介绍")]),e._v(" "),_("p",[e._v("Java虚拟机允许应用程序同时运行多个执行线程。新线程的优先级最初设置为创建线程的优先级，并且仅当创建线程是守护进程时，新线程才是守护进程线程。")]),e._v(" "),_("h3",{attrs:{id:"主要方法和类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主要方法和类"}},[e._v("#")]),e._v(" 主要方法和类")]),e._v(" "),_("p",[e._v("1). init(ThreadGroup group, Runnable target, String name,\nlong stackSize, AccessControlContext acc, boolean inheritThreadLocals) 方法")]),e._v(" "),_("p",[e._v("初始化线程信息。")]),e._v(" "),_("p",[e._v("主要动作：")]),e._v(" "),_("p",[e._v("a). 设置线程名 name")]),e._v(" "),_("p",[e._v("b). 设置group")]),e._v(" "),_("p",[e._v("c). 设置守护线程，和优先级")]),e._v(" "),_("p",[e._v("d). 设置 contextClassLoader，inheritedAccessControlContext，inheritableThreadLocals")]),e._v(" "),_("p",[e._v("e). 设置 target ， stackSize 和 线程id")]),e._v(" "),_("p",[e._v("构造方法主要为调用此方法。")]),e._v(" "),_("p",[e._v("2). sleep(long millis)方法")]),e._v(" "),_("p",[e._v("主要实现为本地方法sleep()方法，不释放cpu资源。")]),e._v(" "),_("p",[e._v("3). start()方法")]),e._v(" "),_("p",[e._v("线程安全，主要实现方法为本地方法start0()方法。")]),e._v(" "),_("p",[e._v("4). run()方法")]),e._v(" "),_("p",[e._v("直接执行 target中的run()方法。")]),e._v(" "),_("p",[e._v("5). exit()方法")]),e._v(" "),_("p",[e._v("将初始化中的设置设为null，方便jvm回收。")]),e._v(" "),_("p",[e._v("6). interrupt()方法")]),e._v(" "),_("p",[e._v("中断方法，线程安全，具体实现为本地的 interrupt0()，主要为设置一个中断flag。")]),e._v(" "),_("p",[e._v("7). interrupted() 方法")]),e._v(" "),_("p",[e._v("本地方法为：isInterrupted(true)\n测试当前线程是否已中断。此方法清除线程的中断状态。\n句话说，如果连续调用两次此方法，则第二次调用将返回false")]),e._v(" "),_("p",[e._v("8). isInterrupted方法")]),e._v(" "),_("p",[e._v("判断释放处于中断情况，具体实现为本地方法为 isInterrupted(false), 不会清楚中断状态。")]),e._v(" "),_("p",[e._v("9). join(long millis)方法")]),e._v(" "),_("p",[e._v("此线程最多等待 millis 毫秒死亡。0 将超时意味着永远等待。")]),e._v(" "),_("p",[e._v("调用isAlive()判断线程是否存活，调用本地wait()方法进行等待。")]),e._v(" "),_("p",[e._v("10). State类")]),e._v(" "),_("p",[e._v("记录了线程的状态")]),e._v(" "),_("p",[e._v("a). NEW")]),e._v(" "),_("p",[e._v("threadStatus & 1 == 0")]),e._v(" "),_("p",[e._v("尚未启动的线程的线程状态。")]),e._v(" "),_("p",[e._v("b). RUNNABLE")]),e._v(" "),_("p",[e._v("threadStatus & 4 != 0 不满足其他情况时且 threadStatus & 1 != 0")]),e._v(" "),_("p",[e._v("可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，如处理器。")]),e._v(" "),_("p",[e._v("c). BLOCKED")]),e._v(" "),_("p",[e._v("threadStatus & 1024 != 0")]),e._v(" "),_("p",[e._v("等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用后重新进入同步块/方法")]),e._v(" "),_("p",[e._v("d). WAITING")]),e._v(" "),_("p",[e._v("threadStatus & 16 != 0")]),e._v(" "),_("p",[e._v("等待线程的线程状态。由于调用以下方法之一，线程处于等待状态：Object.wait(), Thread.join(), park().")]),e._v(" "),_("p",[e._v("处于等待状态的线程正在等待另一个线程执行特定操作。")]),e._v(" "),_("p",[e._v("e). TIMED_WAITING")]),e._v(" "),_("p",[e._v("threadStatus & 32 != 0")]),e._v(" "),_("p",[e._v("具有指定等待时间的等待线程的线程状态。由于使用指定的正等待时间调用以下方法之一，线程处于定时等待状态：wait(long), join(long), parkNanos(), parkUntil()")]),e._v(" "),_("p",[e._v("f). TERMINATED")]),e._v(" "),_("p",[e._v("threadStatus & 2 != 0")]),e._v(" "),_("p",[e._v("终止线程的线程状态。该线程已完成执行。")]),e._v(" "),_("p",[e._v("11). 本地方法")]),e._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[e._v("setPriority0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("stop0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("suspend0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("resume0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("interrupt0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("setNativeName")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("start0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),_("h3",{attrs:{id:"创建方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建方法"}},[e._v("#")]),e._v(" 创建方法")]),e._v(" "),_("p",[e._v("主要有三种方法")]),e._v(" "),_("p",[e._v("1). 继承Thread")]),e._v(" "),_("p",[e._v("2). 实现 Runnable()接口")]),e._v(" "),_("p",[e._v("3). 实现 Callable()接口")]),e._v(" "),_("h2",{attrs:{id:"threadlocal-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-介绍"}},[e._v("#")]),e._v(" ThreadLocal 介绍")]),e._v(" "),_("p",[e._v("此类提供线程局部变量。")]),e._v(" "),_("h3",{attrs:{id:"核心方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#核心方法"}},[e._v("#")]),e._v(" 核心方法")]),e._v(" "),_("p",[e._v("1). get()方法")]),e._v(" "),_("p",[e._v("通过获取当前线程的 ThreadLocalMap 类，获取 table 中的 value值。")]),e._v(" "),_("p",[e._v("2). set(T value)方法")]),e._v(" "),_("p",[e._v("设置 当前线程的 ThreadLocalMap 类，并将 value 设置其 table 的 value")]),e._v(" "),_("p",[e._v("3). ThreadLocalMap 类")]),e._v(" "),_("p",[e._v("软引用类 Entry. 当前 ThreadLocal 为key，value为set设置的值。")]),e._v(" "),_("p",[e._v("a). Entry[] table.")]),e._v(" "),_("p",[e._v("保存每个 ThreadLocal 对应的 value的值。")]),e._v(" "),_("p",[e._v("默认大小为 16;")]),e._v(" "),_("p",[e._v("扩充阈值为 大小的 2/3")]),e._v(" "),_("p",[e._v("扩容为原大小的两倍。")]),e._v(" "),_("h2",{attrs:{id:"java-util-concurrent-包下的类介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-util-concurrent-包下的类介绍"}},[e._v("#")]),e._v(" java.util.concurrent 包下的类介绍")]),e._v(" "),_("h3",{attrs:{id:"重要接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重要接口"}},[e._v("#")]),e._v(" 重要接口")]),e._v(" "),_("p",[e._v("1). Executor")]),e._v(" "),_("p",[e._v("主要方法为 execute(Runnable command); 在将来的某个时间执行给定的命令。")]),e._v(" "),_("p",[e._v("该命令可以在新线程、池线程或调用线程中执行，具体取决于{@code Executor}实现。")]),e._v(" "),_("p",[e._v("2). ExecutorService 继承 Executor接口")]),e._v(" "),_("p",[e._v("a). shutdown() 方法")]),e._v(" "),_("p",[e._v("启动有序关机，执行以前提交的任务，但不接受新任务。如果调用已经关闭，则调用没有其他效果。")]),e._v(" "),_("p",[e._v("b). shutdownNow() 方法")]),e._v(" "),_("p",[e._v("尝试停止所有正在执行的任务，停止正在等待的任务的处理，并返回正在等待执行的任务的列表。")]),e._v(" "),_("p",[e._v("c). isShutdown() 方法")]),e._v(" "),_("p",[e._v("判断当前线程已经被关闭。")]),e._v(" "),_("p",[e._v("d). isTerminated() 方法")]),e._v(" "),_("p",[e._v("关闭后所有任务是否完成。")]),e._v(" "),_("p",[e._v("e). awaitTermination() 方法")]),e._v(" "),_("p",[e._v("等待多长时间后，进行关闭")]),e._v(" "),_("p",[e._v("f). submit(Callable"),_("T",[e._v(" task) 方法")])],1),e._v(" "),_("p",[e._v("提交一个返回值的任务以供执行，并返回一个表示任务挂起结果的未来。")]),e._v(" "),_("p",[e._v("g). invokeAll(Collection<? extends Callable"),_("T",[e._v("> tasks) 方法")])],1),e._v(" "),_("p",[e._v("执行给定的任务，当所有任务完成时，返回一个保存其状态和结果的未来列表。")]),e._v(" "),_("p",[e._v("3). Future 接口")]),e._v(" "),_("p",[e._v("a). get() 方法")]),e._v(" "),_("p",[e._v("如有必要，等待计算完成，然后检索其结果。")]),e._v(" "),_("p",[e._v("4). Runnable接口")]),e._v(" "),_("p",[e._v("a). run() 方法")]),e._v(" "),_("p",[e._v("当使用实现接口Runnable的对象来创建线程时，启动线程会导致在该单独执行的线程中调用对象的run方法。")]),e._v(" "),_("p",[e._v("5). RunnableFuture接口")]),e._v(" "),_("p",[e._v("run() 方法")]),e._v(" "),_("p",[e._v("将此Future设置为其计算结果，除非已取消。")]),e._v(" "),_("p",[e._v("6). Condition 接口")]),e._v(" "),_("p",[e._v("用来替代传统的Object的wait()、notify()实现线程间的协作，相比使用Object的wait()、notify()，使用Condition的await()、signal()这种方式实现线程间协作更加安全和高效。因此通常来说比较推荐使用Condition，阻塞队列实际上是使用了Condition来模拟线程间协作。")]),e._v(" "),_("p",[e._v("await() 方法对应Object的wait()方法")]),e._v(" "),_("p",[e._v("signal() 方法对应Object的notify()方法")]),e._v(" "),_("p",[e._v("signalAll() 方法对应Object的notifyAll()方法")]),e._v(" "),_("p",[e._v("使用lock.newCondition()获取相关类。")]),e._v(" "),_("p",[e._v("7). Lock 接口")]),e._v(" "),_("p",[e._v("lock() 方法：获取锁")]),e._v(" "),_("p",[e._v("lockInterruptibly() 方法：锁中断")]),e._v(" "),_("p",[e._v("tryLock() 方法：尝试获取锁，或者在规定时间内获取锁。")]),e._v(" "),_("p",[e._v("unLock() 方法：释放锁")]),e._v(" "),_("p",[e._v("newCondition() 方法： 创建一个Condition();")]),e._v(" "),_("p",[e._v("8). ReadWriteLock 接口")]),e._v(" "),_("p",[e._v("readLock(): 获取读锁")]),e._v(" "),_("p",[e._v("writeLock(): 获取写锁")]),e._v(" "),_("h3",{attrs:{id:"重要抽象类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重要抽象类"}},[e._v("#")]),e._v(" 重要抽象类")]),e._v(" "),_("p",[e._v("1). AbstractExecutorService 实现ExecutorService接口")]),e._v(" "),_("p",[e._v("a). newTaskFor()方法。")]),e._v(" "),_("p",[e._v("返回给定可运行和默认值的 RunnableFuture")]),e._v(" "),_("p",[e._v("b). submit(Runnable task)方法。")]),e._v(" "),_("p",[e._v("创建一个 RunnableFuture ftask，后续调用 execute(ftask), 并返回ftask.")]),e._v(" "),_("p",[e._v("c). doInvokeAny()方法")]),e._v(" "),_("p",[e._v("主要为实现InvokeAny方法。")]),e._v(" "),_("p",[e._v("d). invokeAll()方法")]),e._v(" "),_("p",[e._v("2). AbstractOwnableSynchronizer")]),e._v(" "),_("p",[e._v("一个线程可能独占的同步器。")]),e._v(" "),_("p",[e._v("a). transient Thread exclusiveOwnerThread")]),e._v(" "),_("p",[e._v("独占模式同步的当前所有者。")]),e._v(" "),_("p",[e._v("3). AbstractQueuedSynchronizer 继承 AbstractOwnableSynchronizer")]),e._v(" "),_("p",[e._v("提供一个框架，用于实现依赖先进先出（FIFO）等待队列的阻塞锁和相关同步器（信号量、事件等）。")]),e._v(" "),_("p",[e._v("AQS。")]),e._v(" "),_("p",[e._v("提供一个框架，用于实现依赖先进先出（FIFO）等待队列的阻塞锁和相关同步器（信号量、事件等）。其内部维护着FIFO的双向队列，也就是CLH队列。CLH (Craig, Landin, and Hagersten) lock queue")]),e._v(" "),_("p",[e._v("此类被设计为大多数类型的同步器的有用基础，这些同步器依赖于单个原子{@code int}值来表示状态。子类必须定义更改此状态的受保护方法，以及定义此状态在获取或释放此对象方面的含义。")]),e._v(" "),_("p",[e._v("鉴于这些，该类中的其他方法执行所有排队和阻塞机制。子类可以维护其他状态字段，但只有原子更新的{@code int}值使用方法{@link#getState}、{@link#setState}和{@link#compareAndSetState}在同步方面被跟踪。")]),e._v(" "),_("p",[e._v("a). 内部类")]),e._v(" "),_("p",[e._v("-) Node 类")]),e._v(" "),_("p",[e._v("双向链表。")]),e._v(" "),_("p",[e._v("CANCELLED = 1;  waitStatus值，指示线程已取消")]),e._v(" "),_("p",[e._v("SIGNAL = -1; waitStatus值，信号值，主要是为了后续节点。当前节点设置为Signal，则主要是为了唤醒后续节点。")]),e._v(" "),_("p",[e._v("CONDITION = -2; waitStatus值，指示线程正在等待条件")]),e._v(" "),_("p",[e._v("PROPAGATE = -3; waitStatus值，指示下一个acquireShared应无条件传播")]),e._v(" "),_("p",[e._v("volatile int waitStatus; 状态字段。对于正常同步节点，字段初始化为0；对于条件节点，字段初始化为条件。使用CAS（或在可能的情况下，使用无条件易失性写入）对其进行修改。")]),e._v(" "),_("p",[e._v("// 节点正在共享模式下等待的标记\nstatic final Node SHARED = new Node();")]),e._v(" "),_("p",[e._v("// 节点正在以独占模式等待的标记\nstatic final Node EXCLUSIVE = null;")]),e._v(" "),_("p",[e._v("-) ConditionObject 类 继承Condition.")]),e._v(" "),_("p",[e._v("private transient Node firstWaiter; condition队列的首节点。")]),e._v(" "),_("p",[e._v("private transient Node lastWaiter; condition队列的尾节点。")]),e._v(" "),_("p",[e._v("doSignal()方法：删除和传输节点，直到达到未取消节点或空节点。从信号中分离出来")]),e._v(" "),_("p",[e._v("doSignalAll() 方法：移除和转移所有节点。")]),e._v(" "),_("p",[e._v("signal()方法：将等待时间最长的线程（如果存在）从该条件的等待队列移动到拥有锁的等待队列。")]),e._v(" "),_("p",[e._v("signalAll()方法: 将所有线程从此条件的等待队列移动到拥有锁的等待队列。")]),e._v(" "),_("p",[e._v("await()方法：实现可中断条件等待。")]),e._v(" "),_("p",[e._v("b) 成员变量")]),e._v(" "),_("p",[e._v("-) Node head")]),e._v(" "),_("p",[e._v("头节点，等待队列的头节点，只能通过setHead方法修改")]),e._v(" "),_("p",[e._v("-) Node tail")]),e._v(" "),_("p",[e._v("尾节点，等待队列的尾结点，只能通过enq方法来添加新的等待节点")]),e._v(" "),_("p",[e._v("-) state")]),e._v(" "),_("p",[e._v("state变量表示锁的状态\n0 表示未锁定\n大于0表示已锁定\n需要注意的是，这个值可以用来实现锁的【可重入性】，例如 state=3 就表示锁被同一个线程获取了3次，想要完全解锁，必须要对应的解锁3次\n同时这个变量还是用volatile关键字修饰的，保证可见性")]),e._v(" "),_("p",[e._v("c) 方法")]),e._v(" "),_("p",[e._v("大部分方法都是在锁中使用。")]),e._v(" "),_("p",[e._v("-) compareAndSetState 方法")]),e._v(" "),_("p",[e._v("使用乐观锁更新状态")]),e._v(" "),_("p",[e._v("-) enq 方法")]),e._v(" "),_("p",[e._v("插入尾节点")]),e._v(" "),_("p",[e._v("-) addWaiter 方法")]),e._v(" "),_("p",[e._v("为当前线程和给定模式创建并排队节点。")]),e._v(" "),_("p",[e._v("-) unparkSuccessor 方法")]),e._v(" "),_("p",[e._v("唤醒节点的后续节点（如果存在）。")]),e._v(" "),_("p",[e._v("-) doReleaseShared 方法")]),e._v(" "),_("p",[e._v("共享模式的释放操作——向后续模式发送信号并确保传播(注意：对于独占模式，如果需要信号，release只相当于调用head的unparkSuccessor。)")]),e._v(" "),_("p",[e._v("-) setHeadAndPropagate 方法")]),e._v(" "),_("p",[e._v('设置队列头，并检查后继队列是否在共享模式下等待，如果是，则在"propagate>0"或"propagate"已设置的情况下进行传播。')]),e._v(" "),_("p",[e._v("-) cancelAcquire 方法")]),e._v(" "),_("p",[e._v("取消正在进行的尝试的节点。")]),e._v(" "),_("p",[e._v("-) acquireQueued 方法")]),e._v(" "),_("p",[e._v("已在队列中的线程以独占不间断模式获取。用于条件等待方法和获取。")]),e._v(" "),_("p",[e._v("-) shouldParkAfterFailedAcquire 方法")]),e._v(" "),_("p",[e._v("检查并更新获取失败节点的状态。如果线程阻塞，返回true。这是所有获取回路中的主要信号控制。要求pred == node.prev。")]),e._v(" "),_("p",[e._v("-) doAcquireInterruptibly 方法")]),e._v(" "),_("p",[e._v("以独占可中断模式获取。")]),e._v(" "),_("p",[e._v("-) doAcquireNanos 方法")]),e._v(" "),_("p",[e._v("以独占定时模式获取。")]),e._v(" "),_("p",[e._v("-) doAcquireShared 方法")]),e._v(" "),_("p",[e._v("以共享不间断模式获取。")]),e._v(" "),_("p",[e._v("-) doAcquireSharedInterruptibly 方法")]),e._v(" "),_("p",[e._v("以共享可中断模式获取。")]),e._v(" "),_("p",[e._v("-) acquire 方法")]),e._v(" "),_("p",[e._v("尝试获取锁，主要调用tryAcquire方法尝试获取锁，成功返回true，失败就将线程封装成Node对象，放入队列。")]),e._v(" "),_("p",[e._v("-) tryAcquire 方法")]),e._v(" "),_("p",[e._v("使用模板模式，需要底层去实现。")]),e._v(" "),_("p",[e._v("-) CAS处理")]),e._v(" "),_("p",[e._v("private static final long stateOffset;\nprivate static final long headOffset;\nprivate static final long tailOffset;\nprivate static final long waitStatusOffset;\nprivate static final long nextOffset;")]),e._v(" "),_("p",[e._v("安装程序支持compareAndSet。我们需要在这里本地实现它:为了允许将来的增强，我们不能显式地子类化AtomicInteger，否则这将是有效和有用的。因此，我们使用hotspot intrinsics API来实现。当我们这样做的时候，我们对其他CASable字段做了同样的事情(否则可以用原子字段更新器来完成)。")]),e._v(" "),_("h3",{attrs:{id:"threadpoolexecutor-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor-介绍"}},[e._v("#")]),e._v(" ThreadPoolExecutor 介绍")]),e._v(" "),_("p",[e._v("继承 AbstractExecutorService 类。")]),e._v(" "),_("ol",[_("li",[e._v("以下来自类的注释：")])]),e._v(" "),_("p",[e._v("一种{@link ExecutorService}，它使用可能的几个池线程之一执行每个提交的任务，通常使用{@link Executors}工厂方法进行配置。")]),e._v(" "),_("p",[e._v("线程池解决了两个不同的问题：它们通常在执行大量异步任务时提供改进的性能，这是因为减少了每个任务的调用开销；它们提供了一种方法来限制和管理执行任务集合时消耗的资源，包括线程。每个{@code ThreadPoolExecutor}还维护一些基本统计信息，例如已完成任务的数量。")]),e._v(" "),_("p",[e._v("a). corePoolSize, maximumPoolSize")]),e._v(" "),_("p",[e._v("在方法{@link#execute（Runnable）}中提交新任务时，如果运行的线程少于corePoolSize，则会创建一个新线程来处理该请求，即使其他工作线程处于空闲状态。如果运行的线程超过corePoolSize但小于maximumPoolSize，则仅当队列已满时才会创建新线程。通过将corePoolSize和maximumPoolSize设置相同，可以创建固定大小的线程池。通过将maximumPoolSize设置为基本无界值，如{@code Integer.MAX_value}，可以允许池容纳任意数量的并发任务。最典型的是，核心池和最大池大小仅在构造时设置，但也可以使用{@link#setCorePoolSize}和{@link#setMaximumPoolSize}动态更改它们。")]),e._v(" "),_("p",[e._v("b). 构造函数")]),e._v(" "),_("p",[e._v("默认情况下，即使核心线程最初也会创建并仅在新任务到达时启动，但这可以使用方法{@link#prestartCoreThread}或{@link#prestartalcorethreads}动态覆盖。如果使用非空队列构造池，则可能需要预启动线程。")]),e._v(" "),_("p",[e._v("c). 创建新线程")]),e._v(" "),_("p",[e._v("使用{@link ThreadFactory}创建新线程。如果没有另外指定，则使用{@link Executors#defaultThreadFactory}，它创建的线程都处于相同的{@link ThreadGroup}，并且具有相同的{@code NORM_PRIORITY}优先级和非守护进程状态。通过提供不同的ThreadFactory，您可以更改线程的名称、线程组、优先级、守护程序状态等。如果{@code ThreadFactory}在从{@code newThread}返回null时无法创建线程，则执行器将继续，但可能无法执行任何任务。")]),e._v(" "),_("p",[e._v("d). 保持活动时间")]),e._v(" "),_("p",[e._v("如果池当前有多个corePoolSize线程，如果多余线程的空闲时间超过keepAliveTime（请参见{@link#getKeepAliveTime（TimeUnit）}），则会终止这些线程。这提供了一种在池未被积极使用时减少资源消耗的方法。如果池稍后变得更活跃，将构造新线程。也可以使用方法{@link#setKeepAliveTime（long，TimeUnit）}动态更改此参数。使用{@code Long.MAX_value}{@link TimeUnit#纳秒}有效地禁止空闲线程在关闭之前终止。默认情况下，仅当存在多个corePoolSize线程时，“保持活动”策略才适用。但是方法{@link#allowCoreThreadTimeOut（boolean）}也可以用于将此超时策略应用于核心线程，只要keepAliveTime值不为零")]),e._v(" "),_("p",[e._v("e). 队列")]),e._v(" "),_("p",[e._v("任何{@link BlockingQueue}都可以用来传输和保存提交的任务。此队列的使用与池大小交互：")]),e._v(" "),_("p",[e._v("如果正在运行的线程少于corePoolSize，则执行器总是倾向于添加新线程，而不是加入队列")]),e._v(" "),_("p",[e._v("如果corePoolSize或多个线程正在运行，那么执行器总是倾向于将请求排队，而不是添加新线程。")]),e._v(" "),_("p",[e._v("如果请求无法排队，则会创建一个新线程，除非该线程将超过maximumPoolSize，在这种情况下，任务将被拒绝。")]),e._v(" "),_("p",[e._v("队列的一般策略有三种:")]),e._v(" "),_("p",[e._v("直接切换。工作队列的一个很好的默认选择是{@link SynchronousQueue}，它将任务交给线程，而不占用线程。在这里，如果没有线程可以立即运行任务，则尝试将任务排队将失败，因此将构造一个新线程。此策略在处理可能具有内部依赖关系的请求集时避免锁定。直接切换通常需要无限的MaximumPoolSize，以避免拒绝新提交的任务。这反过来又允许在命令继续以平均快于其处理速度的速度到达时出现无限线程增长的可能性。")]),e._v(" "),_("p",[e._v("无界队列。使用无界队列（例如没有预定义容量的{@link LinkedBlockingQueue}）将导致新任务在所有corePoolSize线程忙时在队列中等待。因此，创建的线程不会超过corePoolSize(因此，maximumPoolSize的值没有任何影响。）当每个任务完全独立于其他任务时，这可能是合适的，因此任务不会影响其他任务的执行。")]),e._v(" "),_("p",[e._v("有界队列。在与有限的maximumPoolSizes一起使用时有助于防止资源耗尽，但可能更难调整和控制。队列大小和最大池大小可以相互权衡：使用大型队列和小型池可以最大限度地减少CPU使用、操作系统资源和上下文切换开销，但也可能导致人为的低吞吐量。如果任务经常阻塞（例如，如果它们是I/O绑定的），系统可能能够为更多的线程安排时间，而不是您允许的时间。使用小队列通常需要更大的池大小，这使CPU更繁忙，但可能会遇到不可接受的调度开销，这也会降低吞吐量。")]),e._v(" "),_("p",[e._v("f). 拒绝任务")]),e._v(" "),_("p",[e._v("在方法{@link#execute（Runnable）}中提交的新任务将被拒绝，当执行器关闭时，以及当执行器对最大线程和工作队列容量使用有限边界且饱和时。在这两种情况下，{@code execute}方法调用其{@link RejectedExecutionHandler}的{@link RejectedExecutionHandler#rejectedExecution（Runnable，threadpoolexecuter）}方法。")]),e._v(" "),_("p",[e._v("提供了四个预定义的处理程序策略：")]),e._v(" "),_("p",[e._v("在默认的{@link ThreadPoolExecutor.AbortPolicy}中，处理程序在拒绝时抛出运行时{@link RejectedExecutionException}")]),e._v(" "),_("p",[e._v("在{@link ThreadPoolExecutor.callerRunPolicy}中，调用{@code execute}本身的线程运行任务。这提供了一种简单的反馈控制机制，可以降低提交新任务的速度")]),e._v(" "),_("p",[e._v("在{@link ThreadPoolExecutor.DiscardPolicy}中，无法执行的任务被简单地丢弃")]),e._v(" "),_("p",[e._v("在{@link ThreadPoolExecutor.DiscardOldestPolicy}中，如果执行器未关闭，则丢弃工作队列头部的任务，然后重试执行（这可能再次失败，导致重复执行）")]),e._v(" "),_("p",[e._v("可以定义和使用其他类型的{@link RejectedExecutionHandler}类。这样做需要一定的谨慎，特别是当策略设计为仅在特定容量或排队策略下工作时。")]),e._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[e._v("以下为类里面信息的介绍：")])]),e._v(" "),_("p",[e._v("a). 常量信息")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("\n// 小于该值为运行状态\nRUNNING ： \n\n// 1111 1111 1111 1111 1111 1111 1111 1111 1110 0000 0000 0000 0000 0000 0000 0000\n// -536870912\n\n\nSHUTDOWN： 0\n\nSTOP：\n\n// 10 0000 0000 0000 0000 0000 0000 0000\n// 536870912\n\nTIDYING：\n// 100 0000 0000 0000 0000 0000 0000 0000\n// 1073741824\n\nTERMINATED：\n// 110 0000 0000 0000 0000 0000 0000 0000\n// 1610612736\n\nCAPACITY：\n// 1 1111 1111 1111 1111 1111 1111 1111\n// 536870911\n")])])]),_("p",[e._v("b). 成员变量")]),e._v(" "),_("p",[e._v("-) final BlockingQueue"),_("Runnable",[e._v(" workQueue;")])],1),e._v(" "),_("p",[e._v("用于保存任务并将其传递给工作线程的队列。我们不要求workQueue.poll()返回null必然意味着workQueue.isEmpty()，因此仅依靠isEmpty来查看队列是否为空（例如，在决定是否从关闭转换为清理时，我们必须这样做）。这可以容纳特殊用途的队列，例如允许poll()返回null的DelayQueues，即使延迟过期后poll()可能返回非null")]),e._v(" "),_("p",[e._v("-) final ReentrantLock mainLock")]),e._v(" "),_("p",[e._v("锁，还在关机和关机时保持mainLock，以确保工作集稳定，同时分别检查中断和实际中断的权限。")]),e._v(" "),_("p",[e._v("-) final HashSet"),_("Worker",[e._v(" workers")])],1),e._v(" "),_("p",[e._v("包含池中所有工作线程的集合。仅在持有mainLock时访问。")]),e._v(" "),_("p",[e._v("-) final Condition termination")]),e._v(" "),_("p",[e._v("等待条件支持等待终止")]),e._v(" "),_("p",[e._v("-) long largestPoolSize")]),e._v(" "),_("p",[e._v("跟踪达到的最大池大小。仅在mainLock下访问。")]),e._v(" "),_("p",[e._v("-) long completedTaskCount")]),e._v(" "),_("p",[e._v("已完成任务的计数器。仅在工作线程终止时更新。仅在mainLock下访问。")]),e._v(" "),_("p",[e._v("-) volatile ThreadFactory threadFactory")]),e._v(" "),_("p",[e._v("线程工厂，用于创建线程。")]),e._v(" "),_("p",[e._v("-) volatile RejectedExecutionHandler handler")]),e._v(" "),_("p",[e._v("在execute中饱和或关闭时调用处理程序。")]),e._v(" "),_("p",[e._v("-) volatile long keepAliveTime")]),e._v(" "),_("p",[e._v("空闲线程等待工作的超时（纳秒）。")]),e._v(" "),_("p",[e._v("-) volatile boolean allowCoreThreadTimeOut")]),e._v(" "),_("p",[e._v("如果为false（默认），则核心线程即使在空闲时也保持活动状态。")]),e._v(" "),_("p",[e._v("如果为true，则核心线程使用keepAliveTime超时等待工作")]),e._v(" "),_("p",[e._v("-) volatile int corePoolSize")]),e._v(" "),_("p",[e._v("核心线程数")]),e._v(" "),_("p",[e._v("-) volatile int maximumPoolSize")]),e._v(" "),_("p",[e._v("最大的线程数")]),e._v(" "),_("p",[e._v("-) final RejectedExecutionHandler defaultHandler")]),e._v(" "),_("p",[e._v("默认被拒绝的执行处理程序")]),e._v(" "),_("p",[e._v("-) final RuntimePermission shutdownPerm")]),e._v(" "),_("p",[e._v("shutdown和shutdownNow的调用方需要权限。")]),e._v(" "),_("p",[e._v("-) final AccessControlContext acc")]),e._v(" "),_("p",[e._v("执行终结器时要使用的上下文，或null。")]),e._v(" "),_("p",[e._v("c) 内部类")]),e._v(" "),_("p",[e._v("-) Worker 类")]),e._v(" "),_("p",[e._v("主要维护运行任务的线程的中断控制状态，以及其他次要的簿记。此类机会主义地扩展AbstractQueuedSynchronizer，以简化获取和释放围绕每个任务执行的锁的过程。")]),e._v(" "),_("p",[e._v("这可以防止旨在唤醒等待任务的工作线程而不是中断正在运行的任务的中断。我们实现了一个简单的不可重入互斥锁，而不是使用可重入锁，因为我们不希望工作任务在调用诸如setCorePoolSize之类的池控制方法时能够重新获取锁。")]),e._v(" "),_("p",[e._v("为线程池执行的主要类，线程池执行submit()方法和execute()方法时，会将线程实现转换为Worker类，转换完后会调用底层start0()方法。最终会调用Worker中的run()方法。而后调用submit()或execute()中的run方法。")]),e._v(" "),_("p",[e._v("firstTask字段为 初始化任务即为写入的任务。")]),e._v(" "),_("p",[e._v("Thread字段为当前worker的线程。")]),e._v(" "),_("p",[e._v("-) DiscardPolicy 类")]),e._v(" "),_("p",[e._v("被拒绝任务的处理程序，以静默方式放弃被拒绝的任务。")]),e._v(" "),_("p",[e._v("-) DiscardOldestPolicy 类")]),e._v(" "),_("p",[e._v("一种被拒绝任务的处理程序，该处理程序丢弃最早的未处理请求，然后重试{@code execute}，除非关闭执行器，在这种情况下任务被丢弃。")]),e._v(" "),_("p",[e._v("-) CallerRunsPolicy 类")]),e._v(" "),_("p",[e._v("被拒绝任务的处理程序，直接在{@code execute}方法的调用线程中运行被拒绝的任务，除非执行器已关闭，在这种情况下，该任务将被丢弃。")]),e._v(" "),_("p",[e._v("-) AbortPolicy 类")]),e._v(" "),_("p",[e._v("用于抛出{@code RejectedExecutionException}的被拒绝任务的处理程序。")]),e._v(" "),_("p",[e._v("d) 重要方法")]),e._v(" "),_("p",[e._v("-) execute 方法")]),e._v(" "),_("p",[e._v("无返回值的执行线程。如果当前线程数小于核心线程数，直接创建到一个Worker，并启动start0()方法, 后续会调用Worker的run方法。")]),e._v(" "),_("p",[e._v("-) submit 方法")]),e._v(" "),_("p",[e._v("生成一个RunnableFuture类，后执行execute 方法。")]),e._v(" "),_("p",[e._v("-) runWorker 方法")]),e._v(" "),_("p",[e._v("真正的执行线程的方法，也即是Worker中的run()方法的实现。")]),e._v(" "),_("h3",{attrs:{id:"reentrantlock-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock-介绍"}},[e._v("#")]),e._v(" ReentrantLock 介绍")]),e._v(" "),_("p",[e._v("一种可重入互斥{@link Lock}，其基本行为和语义与使用{@code synchronized}方法和语句访问的隐式监视锁相同，但具有扩展功能。")]),e._v(" "),_("ol",[_("li",[e._v("成员变量")])]),e._v(" "),_("p",[e._v("-) Sync sync")]),e._v(" "),_("p",[e._v("Synchronizer providing all implementation mechanics。")]),e._v(" "),_("p",[e._v("同步器提供所有实现机制。")]),e._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[e._v("内部类")])]),e._v(" "),_("p",[e._v("-) Sync 类，继承 AbstractQueuedSynchronizer")]),e._v(" "),_("p",[e._v("lock()方法： 主要实现有公平锁和非公平锁。FairSync公平锁。NonfairSync，非公平锁。默认为非公平锁。")]),e._v(" "),_("p",[e._v("nonfairTryAcquire()方法：非公平锁尝试获取锁，没有锁时，会尝试将状态设置为1，如果设置成功，将 exclusiveOwnerThread 占有的主线程为当前线程。如果不为0，则判断是否是同一个锁，进行重入锁。")]),e._v(" "),_("p",[e._v("tryRelease() 方法：尝试释放锁。判断 exclusiveOwnerThread 是否为当前线程，释放status，如果 status为null，则将 exclusiveOwnerThread设置为 null。")]),e._v(" "),_("p",[e._v("-) NonfairSync 继承 Sync")]),e._v(" "),_("p",[e._v("非公平锁")]),e._v(" "),_("p",[e._v("lock()方法：都会直接先设置锁，如成功即可。否则尝试获取锁。")]),e._v(" "),_("p",[e._v("tryAcquire()方法：调用 nonfairTryAcquire()方法")]),e._v(" "),_("p",[e._v("-) FairSync 继承 Sync")]),e._v(" "),_("p",[e._v("lock()方法：直接调用acquire(1), 尝试获取锁。")]),e._v(" "),_("p",[e._v("tryAcquire()方法：获取头部的队列，且头部要等于当前线程，然后尝试将状态设置为1，如果设置为1，将 exclusiveOwnerThread 占有的主线程为当前线程。如果不为0，则判断是否是同一个锁，进行重入锁。")]),e._v(" "),_("h3",{attrs:{id:"reentrantreadwritelock-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock-介绍"}},[e._v("#")]),e._v(" ReentrantReadWriteLock 介绍")]),e._v(" "),_("p",[e._v("实现 ReadWriteLock锁。")]),e._v(" "),_("ol",[_("li",[e._v("成员变量")])]),e._v(" "),_("p",[e._v("-). final ReentrantReadWriteLock.ReadLock readerLock;")]),e._v(" "),_("p",[e._v("读锁")]),e._v(" "),_("p",[e._v("-). final ReentrantReadWriteLock.WriteLock writerLock;")]),e._v(" "),_("p",[e._v("写锁")]),e._v(" "),_("p",[e._v("-). final Sync sync;")]),e._v(" "),_("p",[e._v("执行所有同步机制")]),e._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[e._v("内部类")])]),e._v(" "),_("p",[e._v("-) Sync 继承 AQS")]),e._v(" "),_("p",[e._v("HoldCounter 类： 用于每个线程读保持计数的计数器。作为ThreadLocal维护; 缓存在cachedHoldCounter。")]),e._v(" "),_("p",[e._v("ThreadLocalHoldCounter 类： ThreadLocal子类。为了反序列化机制，最容易明确定义。")]),e._v(" "),_("p",[e._v("ThreadLocalHoldCounter readHolds： 当前线程持有的可重入读锁的数量。仅在构造函数和readObject中初始化。当线程的读保持计数降为0时删除。")]),e._v(" "),_("p",[e._v("HoldCounter cachedHoldCounter： 成功获取readLock的最后一个线程的持有计数。在通常情况下，下一个要释放的线程是最后一个要获取的线程，这样可以节省ThreadLocal查找。这是非易失性的，因为它只是用作启发式，对于线程缓存来说非常好。")]),e._v(" "),_("p",[e._v("tryRelease(): 尝试释放锁。")]),e._v(" "),_("p",[e._v("tryAcquire(): 尝试加锁。也是可重入锁。如果存在写锁，或者写加锁失败都返回false。")]),e._v(" "),_("p",[e._v("tryReleaseShared(): 尝试释放分享锁。")]),e._v(" "),_("p",[e._v("tryAcquireShared(): 尝试加分享锁。介绍:\n1。如果写锁被另一个线程持有，则失败。\n2。否则，该线程有资格进入锁wrt状态，因此询问它是否应该因为队列策略而阻塞。如果没有，尝试通过套管状态和更新计数授予。注意，步骤不检查可重入获取，这被推迟到完整版本，以避免在更典型的不可重入情况下必须检查持有计数。\n3。如果第2步失败，要么是因为线程明显不合格，要么是因为CAS失败或计数饱和，那么使用完整的重试循环链接到版本。")]),e._v(" "),_("p",[e._v("fullTryAcquireShared(): 用于读取的acquire的完整版本，它处理在tryacquirered中没有处理的CAS丢失和可重入读取。")]),e._v(" "),_("p",[e._v("tryWriteLock(): 执行tryLock写操作，在两种模式下都启用了重载。除了缺少对writerShouldBlock的调用外，这实际上与tryAcquire相同。")]),e._v(" "),_("p",[e._v("tryReadLock(): 执行tryLock读取，在两种模式下都启用了重载。除了缺少对readerShouldBlock的调用外，这实际上与tryacquirered相同。")]),e._v(" "),_("p",[e._v("-) NonfairSync 非公平锁 继承Sync")]),e._v(" "),_("p",[e._v("-) FairSync 公平锁 继承Sync")]),e._v(" "),_("p",[e._v("-) ReadLock 读锁，主要处理分享锁。")]),e._v(" "),_("p",[e._v("-) WriteLock 写锁，独占锁。")]),e._v(" "),_("h3",{attrs:{id:"countdownlatch-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch-介绍"}},[e._v("#")]),e._v(" CountDownLatch 介绍")]),e._v(" "),_("p",[e._v("一种同步辅助，允许一个或多个线程等待一组正在其他线程中执行的操作完成。")]),e._v(" "),_("ol",[_("li",[e._v("成员变量")])]),e._v(" "),_("p",[e._v("Sync sync;")]),e._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[e._v("内部类")])]),e._v(" "),_("p",[e._v("a). Sync 继承 AQS")]),e._v(" "),_("p",[e._v("Sync(count), 设置锁的状态。也即设置的锁的个数")]),e._v(" "),_("p",[e._v("tryAcquireShared(): 尝试加锁，如果锁不为零返回1，否则返回-1")]),e._v(" "),_("p",[e._v("tryReleaseShared(): 尝试释放锁，，将状态-1，直到释放成功。")]),e._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[e._v("方法")])]),e._v(" "),_("p",[e._v("await(): 如果还有未完成的线程，中断当前线程。")]),e._v(" "),_("p",[e._v("countDown(): 释放一个线程。")]),e._v(" "),_("h3",{attrs:{id:"cyclicbarrier-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-介绍"}},[e._v("#")]),e._v(" CyclicBarrier 介绍")]),e._v(" "),_("p",[e._v("一种同步辅助，它允许一组线程都等待彼此到达一个共同的障碍点。cyclicbarrier在涉及固定大小的线程的程序中非常有用，这些线程偶尔必须相互等待。这个屏障被称为cyclic，因为在等待的线程被释放后，它可以被重用。")]),e._v(" "),_("ol",[_("li",[e._v("成员变量")])]),e._v(" "),_("p",[e._v("a). ReentrantLock lock = new ReentrantLock();")]),e._v(" "),_("p",[e._v("用于守卫障碍物入口的锁")]),e._v(" "),_("p",[e._v("b). Condition trip = lock.newCondition();")]),e._v(" "),_("p",[e._v("状态等待直到触发")]),e._v(" "),_("p",[e._v("c). int parties;")]),e._v(" "),_("p",[e._v("d). Runnable barrierCommand;")]),e._v(" "),_("p",[e._v("触发时要运行的命令")]),e._v(" "),_("p",[e._v("e). int count;")]),e._v(" "),_("p",[e._v("仍在等待的群组数。每一代从党派数到0。在每一代新成员或被打破时，它就会被重新设定。")]),e._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[e._v("主要方法")])]),e._v(" "),_("p",[e._v("a). nextGeneration() 方法")]),e._v(" "),_("p",[e._v("更新barrier状态，唤醒所有人。仅在持有锁时调用。")]),e._v(" "),_("p",[e._v("b). breakBarrier() 方法")]),e._v(" "),_("p",[e._v("将当前的 barrier 打破，唤醒所有人。仅在持有锁时调用。")]),e._v(" "),_("p",[e._v("c). dowait() 方法")]),e._v(" "),_("p",[e._v("主要 barrier 代码。")]),e._v(" "),_("p",[e._v("如果当前线程不是最后一个到达的，那么它将被禁用，以进行线程调度，并处于休眠状态，直到发生以下情况之一:")]),e._v(" "),_("p",[e._v("最后一个线程到达;或者其他线程{@linkplain thread #interrupt}当前线程;或者Some other thread {@linkplain thread #interrupt interrupt}另一个等待线程;或其他线程在等待barrier时超时;或者其他线程调用{@link #reset}。")]),e._v(" "),_("p",[e._v("如果当前线程:在进入该方法时设置了中断状态;或者是{@linkplain Thread#interrupt interrupted}在等待时抛出{@link InterruptedException}并清除当前线程的中断状态。")]),e._v(" "),_("p",[e._v("如果在任何线程等待时barrier是{@link #reset}，或者当{@code await}被调用时barrier {@linkplain #isBroken is broken}，或者当任何线程等待时，则抛出{@link BrokenBarrierException}。")]),e._v(" "),_("p",[e._v("如果任何一个线程在等待时被{@linkplain thread #interrupt interrupted}打断，那么所有其他正在等待的线程将抛出{@link BrokenBarrierException}， barrier将被置于broken状态。")]),e._v(" "),_("p",[e._v("如果当前线程是最后一个到达的线程，并且构造函数中提供了一个非空barrier操作，则当前线程在允许其他线程继续之前运行该操作。如果在barrier操作期间发生异常，那么该异常将在当前线程中传播，并且barrier将处于中断状态。")]),e._v(" "),_("p",[e._v("CyclicBarrier 与 CountDownLatch 的区别")]),e._v(" "),_("p",[e._v("两者都是减计数方式，")]),e._v(" "),_("p",[e._v("计算为0时释放所有等待的线程。")]),e._v(" "),_("p",[e._v("CountDownLatch 计数为0时，无法重置。 CyclicBarrier 计数为0时，计数置为0重新开始。")]),e._v(" "),_("p",[e._v("CountDownLatch 调用countDown()方法计数减一，调用await()方法只进行阻塞，对计数没任何影响。")]),e._v(" "),_("p",[e._v("CyclicBarrier 调用await()进行减一，不为0时，则线程阻塞。")]),e._v(" "),_("p",[e._v("CountDownLatch 不可重复利用。")]),e._v(" "),_("p",[e._v("CyclicBarrier 可重复利用。")])])}),[],!1,null,null,null);v.default=a.exports}}]);